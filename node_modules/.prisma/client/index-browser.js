
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.12.0
 * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
 */
Prisma.prismaVersion = {
  client: "4.12.0",
  engine: "659ef412370fa3b41cd7bf6e94587c1dfb7f67e7"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ContatoScalarFieldEnum = makeEnum({
  id: 'id',
  idTipo: 'idTipo',
  idPessoa: 'idPessoa',
  descricao: 'descricao',
  ativo: 'ativo'
});

exports.Prisma.EnderecoScalarFieldEnum = makeEnum({
  id: 'id',
  idTipo: 'idTipo',
  idPessoa: 'idPessoa',
  cep: 'cep',
  local: 'local',
  numero: 'numero',
  bairro: 'bairro',
  complemento: 'complemento',
  cidade: 'cidade',
  estado: 'estado',
  ativo: 'ativo',
  principal: 'principal'
});

exports.Prisma.PermissaoScalarFieldEnum = makeEnum({
  id: 'id',
  idTipo: 'idTipo',
  idPessoa: 'idPessoa',
  listar: 'listar',
  cadastrar: 'cadastrar',
  editar: 'editar',
  excluir: 'excluir'
});

exports.Prisma.PessoaScalarFieldEnum = makeEnum({
  id: 'id',
  nome: 'nome',
  documento: 'documento',
  razaoSocial: 'razaoSocial',
  nomeFantasia: 'nomeFantasia',
  inscricaoMunicipal: 'inscricaoMunicipal',
  inscricaoEstadual: 'inscricaoEstadual',
  nascimento: 'nascimento',
  dataCadastro: 'dataCadastro',
  dataAtualizado: 'dataAtualizado',
  ativo: 'ativo',
  isAdmin: 'isAdmin',
  tipoId: 'tipoId',
  empresaId: 'empresaId'
});

exports.Prisma.PessoaTipoScalarFieldEnum = makeEnum({
  id: 'id',
  idTipo: 'idTipo',
  idPessoa: 'idPessoa'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TipoScalarFieldEnum = makeEnum({
  id: 'id',
  nome: 'nome',
  tipoId: 'tipoId',
  ativo: 'ativo'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserEmpresaScalarFieldEnum = makeEnum({
  id: 'id',
  idPessoa: 'idPessoa',
  idEmpresa: 'idEmpresa',
  pessoaId: 'pessoaId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  idPessoa: 'idPessoa',
  email: 'email',
  password: 'password',
  refreshToken: 'refreshToken',
  dataCadastro: 'dataCadastro',
  dataAtualizado: 'dataAtualizado',
  ativo: 'ativo'
});


exports.Prisma.ModelName = makeEnum({
  Tipo: 'Tipo',
  Pessoa: 'Pessoa',
  PessoaTipo: 'PessoaTipo',
  Endereco: 'Endereco',
  User: 'User',
  UserEmpresa: 'UserEmpresa',
  Permissao: 'Permissao',
  Contato: 'Contato'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
